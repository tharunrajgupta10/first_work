[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\nimma\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\nimma\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.4 (Amazon.com Inc. Java 1.8.0_292)
[debug]       Load.loadUnit: plugins took 130.5768ms
[debug]       Load.loadUnit: defsScala took 0.5848ms
[debug] [Loading] Scanning directory C:\Users\nimma\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nimma\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 29.8428 ms
[debug]           Load.resolveProject(global-plugins) took 83.6162ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\nimma\.sbt\1.0\plugins, plugins: List(<none>))) took 152.0712ms
[debug] [Loading] Done in C:\Users\nimma\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 184.0696ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.5988ms
[debug]     Load.loadUnit(file:/C:/Users/nimma/.sbt/1.0/plugins/, ...) took 330.5002ms
[debug]   Load.apply: load took 677.5286ms
[debug]   Load.apply: resolveProjects took 9.0775ms
[debug]   Load.apply: finalTransforms took 79.8345ms
[debug]   Load.apply: config.delegates took 10.8784ms
[debug]   Load.apply: Def.make(settings)... took 586.1404ms
[debug]   Load.apply: structureIndex took 142.4163ms
[debug]   Load.apply: mkStreams took 1.94ms
[info] loading global plugins from C:\Users\nimma\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3427.4119ms
[debug]           Load.loadUnit: plugins took 38.7457ms
[debug]           Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory C:\Users\nimma\IdeaProjects\work1\project
[debug]             Load.loadUnit: mkEval took 11.0918ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nimma\IdeaProjects\work1\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.6271 ms
[info] loading settings for project work1-build from idea.sbt ...
[debug]               Load.resolveProject(work1-build) took 6.7782ms
[debug]             Load.loadTransitive: finalizeProject(Project(id work1-build, base: C:\Users\nimma\IdeaProjects\work1\project, plugins: List(<none>))) took 10.4332ms
[debug] [Loading] Done in C:\Users\nimma\IdeaProjects\work1\project, returning: (work1-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3492.7209ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.9629ms
[debug]         Load.loadUnit(file:/C:/Users/nimma/IdeaProjects/work1/project/, ...) took 3541.8944ms
[debug]       Load.apply: load took 3543.8829ms
[debug]       Load.apply: resolveProjects took 0.2458ms
[debug]       Load.apply: finalTransforms took 8.6637ms
[debug]       Load.apply: config.delegates took 0.487ms
[debug]       Load.apply: Def.make(settings)... took 104.9425ms
[debug]       Load.apply: structureIndex took 35.0819ms
[debug]       Load.apply: mkStreams took 0.0027ms
[info] loading project definition from C:\Users\nimma\IdeaProjects\work1\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 10750.2549ms
[debug]     Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory C:\Users\nimma\IdeaProjects\work1
[debug]       Load.loadUnit: mkEval took 0.343ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nimma\IdeaProjects\work1, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.6249 ms
[info] loading settings for project work1 from build.sbt ...
[debug]         Load.resolveProject(work1) took 37.4615ms
[debug]       Load.loadTransitive: finalizeProject(Project(id work1, base: C:\Users\nimma\IdeaProjects\work1, plugins: List(<none>))) took 41.4235ms
[debug] [Loading] Done in C:\Users\nimma\IdeaProjects\work1, returning: (work1)
[debug]     Load.loadUnit: loadedProjectsRaw took 6138.5581ms
[debug]     Load.loadUnit: cleanEvalClasses took 60.6084ms
[debug]   Load.loadUnit(file:/C:/Users/nimma/IdeaProjects/work1/, ...) took 16950.2435ms
[debug] Load.apply: load took 16952.1686ms
[debug] Load.apply: resolveProjects took 0.1304ms
[debug] Load.apply: finalTransforms took 27.5896ms
[debug] Load.apply: config.delegates took 0.3871ms
[debug] Load.apply: Def.make(settings)... took 93.2137ms
[debug] Load.apply: structureIndex took 87.1049ms
[debug] Load.apply: mkStreams took 0.0024ms
[info] set current project to work1 (in build file:/C:/Users/nimma/IdeaProjects/work1/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 58040 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 58040, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to work1 (in build file:/C:/Users/nimma/IdeaProjects/work1/)
[debug] > Exec(idea-shell, None, None)
